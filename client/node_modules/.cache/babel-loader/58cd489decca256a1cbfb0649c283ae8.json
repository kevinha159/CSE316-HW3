{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveSong_Transaction from './transactions/MoveSong_Transaction';\nimport AddSong_Transaction from './transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from './transactions/DeleteSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG: \"MARK_SONG\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markedSongIdx: -1,\n    markedSong: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedList: payload\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG:\n        {\n          console.log(\"Marking song \" + payload);\n          console.log(store.currentList);\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedSongIdx: payload.index,\n            markedSong: payload.song\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  };\n\n  store.createNewList = function () {\n    async function createNewList() {\n      console.log(\"Calling post playlist\");\n      let res = await api.postPlaylist({\n        name: \"Untitled \" + store.newListCounter,\n        songs: []\n      });\n\n      if (res.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: res.data.playlist\n        });\n        store.history.push(\"/playlist/\" + res.data.playlist._id);\n      }\n    }\n\n    createNewList();\n  };\n\n  store.addSong = function () {\n    async function asyncAddSong() {\n      let song = {\n        artist: \"Unknown\",\n        title: \"Untitled\",\n        youTubeId: \"dQw4w9WgXcQ\"\n      };\n      store.currentList.songs.push(song);\n      store.putPlaylist();\n    }\n\n    asyncAddSong();\n  };\n\n  store.insertSong = function (idx, song) {\n    async function asyncInsertSong(idx) {\n      store.currentList.songs.splice(idx, 0, song);\n      store.putPlaylist();\n    }\n\n    asyncInsertSong(idx);\n  };\n\n  store.deleteSong = function (idx) {\n    async function asyncDeleteSong(idx) {\n      console.log(store.currentList);\n      store.currentList.songs.splice(idx, 1);\n      store.putPlaylist();\n    }\n\n    asyncDeleteSong(idx);\n  };\n\n  store.editSong = function (song) {\n    async function asyncEditSong(song) {\n      store.currentList.songs[store.markedSongIdx].title = song.title;\n      store.currentList.songs[store.markedSongIdx].artist = song.artist;\n      store.currentList.songs[store.markedSongIdx].youTubeId = song.youTubeId;\n      store.putPlaylist();\n    }\n\n    asyncEditSong(song);\n  };\n\n  store.moveSong = function (start, end) {\n    console.log(store.currentList);\n    let temp = store.currentList.songs[start];\n    store.currentList.songs[start] = store.currentList.songs[end];\n    store.currentList.songs[end] = temp;\n    store.putPlaylist();\n  };\n\n  store.clearAllTransactions = function () {\n    tps.clearAllTransactions();\n  };\n\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addAddSongTransaction = function () {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n\n  store.addDeleteSongTransaction = function (idx, song) {\n    console.log(store.markedSongIdx);\n    console.log(store.markedSong);\n    let transaction = new DeleteSong_Transaction(store, store.markedSongIdx, store.markedSong);\n    tps.addTransaction(transaction);\n  };\n\n  store.putPlaylist = function () {\n    async function asyncPutPlaylist() {\n      const res = await api.putPlaylistById(store.currentList._id, store.currentList);\n\n      if (res.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n        console.log(\"Put successful\");\n      }\n    }\n\n    asyncPutPlaylist();\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        console.log(playlist);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.deleteMarkedList = function () {\n    async function asyncDeleteListById() {\n      let response = await api.deletePlaylistById(store.markedList._id);\n\n      if (response.status === 200) {\n        store.loadIdNamePairs();\n      }\n    }\n\n    asyncDeleteListById();\n  };\n\n  store.deleteMarkedSong = function () {\n    async function asyncDeleteMarkedSong() {\n      console.log(store.currentList);\n      console.log(store.markedSongIdx);\n      store.currentList.songs.splice(store.markedSongIdx, 1);\n      console.log(store.currentList);\n      store.putPlaylist();\n    }\n\n    asyncDeleteMarkedSong();\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.showDeleteListModal = function (id) {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.SET_CURRENT_LIST,\n      payload: store.currentList\n    });\n  };\n\n  store.showDeleteSongModal = function (obj) {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: obj\n    });\n  };\n\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.SET_CURRENT_LIST,\n      payload: store.currentList\n    });\n  };\n\n  store.showEditSongModal = function (obj) {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG,\n      payload: obj\n    });\n    console.log(store.markedSong);\n  };\n\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.SET_CURRENT_LIST,\n      payload: store.currentList\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"WWVOKVZ954CxQza1yuC/IUYBdM4=\");","map":{"version":3,"sources":["/Users/kevin/Documents/CSE316/playerlister-hw3/Playlister_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveSong_Transaction","AddSong_Transaction","DeleteSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","MARK_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markedSongIdx","markedSong","storeReducer","action","type","payload","playlist","markedList","console","log","index","song","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","createNewList","res","postPlaylist","songs","history","push","addSong","asyncAddSong","artist","title","youTubeId","putPlaylist","insertSong","idx","asyncInsertSong","splice","deleteSong","asyncDeleteSong","editSong","asyncEditSong","moveSong","start","end","temp","clearAllTransactions","addMoveSongTransaction","transaction","addTransaction","addAddSongTransaction","addDeleteSongTransaction","asyncPutPlaylist","putPlaylistById","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","deleteMarkedList","asyncDeleteListById","deletePlaylistById","status","deleteMarkedSong","asyncDeleteMarkedSong","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","showDeleteListModal","modal","document","getElementById","classList","add","hideDeleteListModal","remove","showDeleteSongModal","obj","hideDeleteSongModal","showEditSongModal","hideEditSongModal"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveSong_Transaction from './transactions/MoveSong_Transaction';\nimport AddSong_Transaction from './transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from './transactions/DeleteSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    MARK_SONG: \"MARK_SONG\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markedSongIdx: -1,\n        markedSong: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markedList: payload\n                });\n            }\n\n            case GlobalStoreActionType.MARK_SONG: {\n                console.log(\"Marking song \" + payload);\n                console.log(store.currentList);\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markedSongIdx: payload.index,\n                    markedSong: payload.song\n                });\n            }\n\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    store.createNewList = function () {\n        async function createNewList(){\n\n            console.log(\"Calling post playlist\");\n            let res = await api.postPlaylist({\n                name:\"Untitled \" + store.newListCounter,\n                songs:[]\n            });\n\n            if(res.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: res.data.playlist\n                })\n                store.history.push(\"/playlist/\" + res.data.playlist._id);\n            }\n        }\n        createNewList();\n    }\n\n    store.addSong = function() {\n        async function asyncAddSong(){\n            let song = {\n                artist: \"Unknown\",\n                title: \"Untitled\",\n                youTubeId: \"dQw4w9WgXcQ\"\n            }\n            store.currentList.songs.push(song);\n            store.putPlaylist();\n        }\n        asyncAddSong();\n    }\n\n    store.insertSong = function (idx, song) {\n        async function asyncInsertSong(idx){\n            store.currentList.songs.splice(idx, 0, song);\n            store.putPlaylist();\n        }\n        asyncInsertSong(idx);    \n    }\n\n    store.deleteSong = function (idx) {\n        async function asyncDeleteSong(idx){\n            console.log(store.currentList);\n            store.currentList.songs.splice(idx, 1)\n            store.putPlaylist();\n        }\n        asyncDeleteSong(idx);\n    }\n\n    store.editSong = function (song){\n        async function asyncEditSong(song){\n            store.currentList.songs[store.markedSongIdx].title = song.title;\n            store.currentList.songs[store.markedSongIdx].artist = song.artist;\n            store.currentList.songs[store.markedSongIdx].youTubeId = song.youTubeId;\n            store.putPlaylist();\n        }\n        asyncEditSong(song);\n    }\n\n    store.moveSong = function(start, end) {\n        console.log(store.currentList);\n        let temp = store.currentList.songs[start];\n        store.currentList.songs[start] = store.currentList.songs[end];\n        store.currentList.songs[end] = temp;\n        store.putPlaylist();\n    }\n    store.clearAllTransactions = function(){\n        tps.clearAllTransactions();\n    }\n    store.addMoveSongTransaction = function (start, end){\n        let transaction = new MoveSong_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    store.addAddSongTransaction = function () {\n        let transaction = new AddSong_Transaction(store);\n        tps.addTransaction(transaction);\n    }\n\n    store.addDeleteSongTransaction = function (idx, song) {\n        console.log(store.markedSongIdx);\n        console.log(store.markedSong);\n        let transaction = new DeleteSong_Transaction(store, store.markedSongIdx, store.markedSong);\n        tps.addTransaction(transaction);\n    }\n\n    store.putPlaylist = function () { \n        async function asyncPutPlaylist(){\n            const res = await api.putPlaylistById(store.currentList._id, store.currentList);\n            if(res.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                })\n                console.log(\"Put successful\");\n            }\n        }\n        asyncPutPlaylist();\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                console.log(playlist);\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.deleteMarkedList = function () {\n        async function asyncDeleteListById() {\n            let response = await api.deletePlaylistById(store.markedList._id);\n            if (response.status === 200) {\n                store.loadIdNamePairs();\n            }\n        }\n        asyncDeleteListById();\n    }\n\n    store.deleteMarkedSong = function () {\n        async function asyncDeleteMarkedSong() {\n            console.log(store.currentList);\n            console.log(store.markedSongIdx);\n            store.currentList.songs.splice(store.markedSongIdx, 1)\n            console.log(store.currentList);\n            store.putPlaylist();\n        }\n        asyncDeleteMarkedSong();        \n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    \n\n    store.showDeleteListModal= function (id) {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n        })\n    }\n    \n    store.hideDeleteListModal= function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: store.currentList\n        })\n    }\n\n    store.showDeleteSongModal= function (obj) {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: obj\n        })\n    }\n    \n    store.hideDeleteSongModal= function () {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: store.currentList\n        })\n    }\n\n    store.showEditSongModal= function (obj) {\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG,\n            payload: obj\n        })\n        console.log(store.markedSong);\n    }\n    \n    store.hideEditSongModal= function () {\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: store.currentList\n        })\n    }\n\n    \n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}